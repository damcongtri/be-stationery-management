// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stationeryManagement.Data.Common.DbContext;

#nullable disable

namespace stationeryManagement.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240110080759_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("stationeryManagement.Data.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Import", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"), 1L, 1);

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImportId");

                    b.HasIndex("UserCreateId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.ImportDetail", b =>
                {
                    b.Property<int>("ImportDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDetailsId"), 1L, 1);

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StationeryId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ImportDetailsId");

                    b.HasIndex("ImportId");

                    b.HasIndex("StationeryId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"), 1L, 1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApprovedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("ApprovedId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.RequestDetail", b =>
                {
                    b.Property<int>("RequestDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestDetailsId"), 1L, 1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StationeryId")
                        .HasColumnType("int");

                    b.HasKey("RequestDetailsId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StationeryId");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Stationery", b =>
                {
                    b.Property<int>("StationeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationeryId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationeryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Stationeries");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuperiorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("stationeryManagement.Data.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ThresholdAmountPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("stationeryManagement.Data.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Import", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreate");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.ImportDetail", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.Import", "Import")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stationeryManagement.Data.Model.Stationery", "Stationery")
                        .WithMany()
                        .HasForeignKey("StationeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Stationery");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.RefreshToken", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Request", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedId");

                    b.HasOne("stationeryManagement.Data.Model.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.RequestDetail", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.Request", "Request")
                        .WithMany("RequestDetails")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stationeryManagement.Data.Model.Stationery", "Stationery")
                        .WithMany()
                        .HasForeignKey("StationeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Stationery");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Stationery", b =>
                {
                    b.HasOne("stationeryManagement.Data.Model.Category", null)
                        .WithMany("Stationery")
                        .HasForeignKey("CategoryId");

                    b.HasOne("stationeryManagement.Data.Supplier", "Supplier")
                        .WithMany("StationeryItems")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.User", b =>
                {
                    b.HasOne("stationeryManagement.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("stationeryManagement.Data.Model.User", "Superior")
                        .WithMany("Subordinates")
                        .HasForeignKey("SuperiorId");

                    b.Navigation("Role");

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Category", b =>
                {
                    b.Navigation("Stationery");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Import", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.Request", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("stationeryManagement.Data.Model.User", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("stationeryManagement.Data.Supplier", b =>
                {
                    b.Navigation("StationeryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
